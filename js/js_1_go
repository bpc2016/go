package main

import (
	"log"
	"net/http"
	//"os"
	//"fmt"
	"bytes"
	"io"
	"image"
	"image/draw"
	"image/color"
	"image/png"
	"math/cmplx"
	//"time"
	//"math/rand"
	"encoding/base64"
)

func main() {
	http.HandleFunc("/", handler_init) // each request calls handler
	http.HandleFunc("/image", handler_image) // each request calls handler
	http.Handle("/static/",
		http.StripPrefix("/static/", http.FileServer(http.Dir(".")) ) ) 
	log.Fatal(http.ListenAndServe("localhost:8000", nil))
}

// display the base html
func handler_init(w http.ResponseWriter, r *http.Request) { // note the use of backtick!!
	w.Write([]byte(`
<html>
<head>
<title>Mandelbrot</title>
<link rel="stylesheet" href="static/overlay.css">
<script type="text/javascript" src="static/jquery-1.9.1.min.js"></script>
<script type="text/javascript" src="static/mandelbrot.js"></script>
</head>
<body><h2>Mandelbrot</h2>
<div id="imgs" style="position:relative">
</div>
</body>
</html>`))}

// return a mnadelbrot image
func handler_image(w http.ResponseWriter, r *http.Request) {
	//w.Write([]byte("12345"))
	getImage(w) // fetch the base64 encoded png image
}


func getImage(w io.Writer) {
	const (
		xmin, ymin, xmax, ymax = -2, -2, +2, +2
		width, height          = 1024, 1024
	)
	//t := time.Now().Nanosecond()
	//rand.Seed(int64(t))

	//filename := [4]string {"0.png","1.png","2.png", "3.png"}

	//var fps  [4]os.File
	
//	for i:=0;i<4;i++ {
//		fp,err := os.Create(filename[i])
//		if err !=nil {
//			fmt.Printf("File creation error\n")
//			return
//		}
//		fps[i] = *fp
//	}


//	var imgs  [4]image.RGBA
//	for i:=0;i<4;i++ {
//		imgs[i] = *image.NewRGBA(image.Rect(0, 0, width, height))
//		draw.Draw(&imgs[i], imgs[i].Bounds(), image.Transparent, image.ZP, draw.Src)
//	}

	img := image.NewRGBA(image.Rect(0, 0, width, height))
	draw.Draw(img, img.Bounds(), image.Transparent, image.ZP, draw.Src)

	buf := new(bytes.Buffer)
	for py := 0; py < height; py++ {
		y := float64(py)/height*(ymax-ymin) + ymin
		for px := 0; px < width; px++ {
			x := float64(px)/width*(xmax-xmin) + xmin
			z := complex(x, y)
			// Image point (px, py) represents complex value z.
			//imgs[rand.Intn(4)].Set(px, py, mandelbrot(z))
			img.Set(px, py, mandelbrot(z))
		}
	}
	png.Encode(io.Writer(buf), img) // NOTE: ignoring errors, to an io.Writer

	// convert to base64
	encoder := base64.NewEncoder(base64.StdEncoding, w) // send to target w
	encoder.Write(buf.Bytes())
	encoder.Close()

//	for i:=0;i<4;i++ {
//		buf := new(bytes.Buffer)
//		png.Encode(io.Writer(buf), &imgs[i]) // NOTE: ignoring errors
//		fps[i].Write(buf.Bytes()) //write to file
//		fps[i].Close()
//	}

	//fmt.Println("goodbye")
}

func mandelbrot(z complex128) color.Color {
	const iterations = 200
	const contrast = 15

	var v complex128
	for n := uint8(0); n < iterations; n++ {
		v = v*v + z
		if cmplx.Abs(v) > 2 {
			return color.Gray{255 - contrast*n}
		}
	}
	return color.Black
}
