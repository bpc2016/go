/*
	localhost:8000[/?num=2&r=64]
	generates a *color* 1024x1024 mandelbrot progressively
	modify rate, iterations
	- using goroutines, here we have 3
*/

package main

import (
	"log"
	"net/http"
	"fmt"
	"bytes"
	"io"
	"image"
	"image/draw"
	"image/color"
	"image/png"
	"math/cmplx"
	"time"
	"math/rand"
	"encoding/base64"
	"strconv"
	"math"
)

func main() {
	http.HandleFunc("/", handler_init) // each request calls handler
	http.HandleFunc("/image", handler_image) // each request calls handler
	http.Handle("/static/",
		http.StripPrefix("/static/", http.FileServer(http.Dir(".")) ) ) 
	log.Fatal(http.ListenAndServe("localhost:8000", nil))
	fmt.Println("server started on port 8000 ...")
}

// display the base html
func handler_init(w http.ResponseWriter, r *http.Request) {
	setCoords()
	if err := r.ParseForm(); err != nil {
		log.Print(err)
	}
	//set up our vars num=iterations
	for k, v := range r.Form {
		if k!="num" && k!="r" { continue }
		fmt.Println("k=",k,"v=",v)
		n,err := strconv.Atoi(v[0])
		if err != nil {
			log.Print(err)
			continue
		}
		switch k {
			case "num": num = n  // global var number of  iterations
			case "r": rate = n  // global var rate
		}
	}
 	// note the use of backtick!!
	w.Write([]byte(`
<html>
<head>
<title>Mandelbrot</title>
<script type="text/javascript" src="static/jquery-1.9.1.min.js"></script>
<script type="text/javascript" src="static/mandelbrot.js"></script>
</head>
<body><h2>Mandelbrot</h2>
<div id="imgs" style="position:relative">
</div>
</body>
</html>`))}

// return a mandelbrot image
func handler_image(w http.ResponseWriter, r *http.Request) {
	getImage(w) // fetch the base64 encoded png image
}

const(
	width,height = 1024, 1024
	N = 1024*1024 //number of pixels
	x0, y0, side = -0.75, 0.21, 0.04
)

var (
	x [N] int
	y [N] int
	perm [N] int
	position = 0
	rate = 128  // how quickly we process - default if we dont  ?r=345 etc
	num = 1    // multiples of 600
)

func setCoords(){
	//fill our coordinate arrays
	k := 0;
	for iy := 0; iy<height; iy++{
		for ix := 0; ix<width; ix++{
			x[k] = ix
			y[k] = iy
			k++	
		}
	}		
	perm = randPermutation() // set up the permutation
	position = 0
}

func getImage(w io.Writer) {
	if position == N {  // we are done, send this indicator to js
		io.WriteString(w,"0")
		return 
	}
	if rate==0 {rate=256}
	lim := position + 1024*rate
	//if rate > 40 { rate = rate - 40 }
fmt.Print("Rate = ",rate,", position = ",position,"\n")
	if lim > N { lim=N }

	buf := new(bytes.Buffer)
	c := make(chan image.Image)

	img0 := image.NewRGBA(image.Rect(0, 0, width, height))

	go partialImage(lim,3,0,c)
	go partialImage(lim,3,1,c)
	go partialImage(lim,3,2,c)

	img1, img2, img3 := <-c, <-c, <-c

	draw.Draw(img0, img0.Bounds(), img1, image.ZP, draw.Src) // 
	draw.Draw(img0, img0.Bounds(), img2, image.ZP, draw.Over) // the rest are so
	draw.Draw(img0, img0.Bounds(), img3, image.ZP, draw.Over) // 

	png.Encode(io.Writer(buf), img0) // NOTE: ignoring errors, to an io.Writer
	position = lim	// update

	// convert to base64
	encoder := base64.NewEncoder(base64.StdEncoding, w) // send to target w
	encoder.Write(buf.Bytes())
	encoder.Close()
}

func partialImage(lim int, base int, part int, c chan image.Image) {
	img := image.NewRGBA(image.Rect(0, 0, width, height))
	draw.Draw(img, img.Bounds(), image.Transparent, image.ZP, draw.Src)

	var (
		px,py,r_k int	//pixel positions
		rx,ry float64	//real, im parts
		z complex128
	)

	for k:=position; k<lim; k++ { 
		if k%base != part { continue } // choose our residue class
		r_k = perm[k]	// randomize
		px = x[r_k]; py = y[r_k]
		rx = x0 +float64(px)/width*side
		ry = y0 + float64(py)/height*side 
		z = complex(rx, ry) 
		img.Set(px, height-py, mandelbrot(z)) //orientation: '-'
	}
	c <- img
}

func mandelbrot(z complex128) color.Color {
	var (
		c uint64
		v complex128
		w [3]uint8
	)
	iterations := num*600 // we scale the given iterations
	for n := 0; n < iterations; n++ { // iterations comes from global 'num' !!
		v = v*v + z
		if cmplx.Abs(v) > 2 {
			c = coloRatio(n,iterations)
			w = getColors(c)
			return color.RGBA{w[0],w[1],w[2],255}
		}
	}
	return color.Black
}

func coloRatio(z, max int) uint64{
	const T = 8355771 //codeColors([3]int{127,127,127})
	const B	 = float64(1256) 
	x := float64(z)/float64(max)
	y := (1 - B*x - (1-B*float64(max))*x*x)*float64(T)
	return uint64(math.Floor(y))
}


func codeColors(c [3]int) int{
	const B = 1<<8
	return ((c[0]*B) +c[1])*B + c[2] 
}

func getColors(v uint64) [3] uint8 {
	const B = 1<<8
	var w [3] uint8 
	for i:=0; i<3; i++ {
		w[2-i] = uint8(v%B)
		v = v/B
	}
	return w
}

func randPermutation() [N] int {
	t := time.Now().Nanosecond()
	rand.Seed(int64(t))
	
	var v [N]int
	for i,_ := range v{
		v[i] = i // we will start from 0, of course
	}
	for i:=0; i<N-1; i++{
		j := rand.Intn(N-i)+ i	// now i <= j <= N-1
		h := v[j];v[j] = v[i]; v[i] = h //swap v_i,v_j
	}
	return v
}
