package main

import (
	"os"
	"fmt"
	"bytes"
	"io"
	"image"
	"image/draw"
	"image/color"
	"image/png"
	"math/cmplx"
)

func main() {
	const (
		xmin, ymin, xmax, ymax = -2, -2, +2, +2
		width, height          = 1024, 1024
	)

	filename := [4]string {"10.png","11.png","12.png", "13.png"}

	var fps  [4]os.File
	
	for i:=0;i<4;i++ {
		fp,err := os.Create(filename[i])
		if err !=nil {
			fmt.Printf("File creation error\n")
			return
		}
		fps[i] = *fp
	}


	var imgs  [4]image.RGBA
	for i:=0;i<4;i++ {
		imgs[i] = *image.NewRGBA(image.Rect(0, 0, width, height))
		draw.Draw(&imgs[i], imgs[i].Bounds(), image.Transparent, image.ZP, draw.Src)
	}

	//img := image.NewRGBA(image.Rect(0, 0, width, height))

	for py := 0; py < height; py++ {
		y := float64(py)/height*(ymax-ymin) + ymin
		for px := 0; px < width; px++ {
			x := float64(px)/width*(xmax-xmin) + xmin
			z := complex(x, y)
			// Image point (px, py) represents complex value z.
			imgs[reduce(py)].Set(px, py, mandelbrot(z))
		}
	}

	for i:=0;i<4;i++ {
		buf := new(bytes.Buffer)
		png.Encode(io.Writer(buf), &imgs[i]) // NOTE: ignoring errors
		fps[i].Write(buf.Bytes()) //write to file
		fps[i].Close()
	}

	fmt.Println("complete!")
}

func reduce (i int) int {//return one of 0,1,2,3,4 based on the x-ccord input
	if i<= 256 {return 0}
	if i<= 512 {return 1}
	if i<= 768 {return 2}
	return 3
}

func mandelbrot(z complex128) color.Color {
	const iterations = 200
	const contrast = 15

	var v complex128
	for n := uint8(0); n < iterations; n++ {
		v = v*v + z
		if cmplx.Abs(v) > 2 {
			return color.Gray{255 - contrast*n}
		}
	}
	return color.Black
}
